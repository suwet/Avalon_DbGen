using System;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using ReactiveUI;
using Dapper;

namespace [{NAMESPACE}]
{
	public  class [{CLASS_NAME}] : BaseService
	{
        private [{DAL_CLASS}] _[{DAL_CLASS}] = new [{DAL_CLASS}]();

        public override void ConfigMapForService()
        {
            // access the TheMapper
            //TheMapper
        }

		public List<[{VIEW_MODEL_NAME}]> GetAll()    
        {    
           try
           {
                var results = _[{DAL_CLASS}].GetAll();
                var datas = TheMapper.Map<List<[{VIEW_MODEL_NAME}]>>(results);
                return datas;
           }
           catch(Exception ex)
           {
                throw;
           }
        }    
        
        public async Task<IEnumerable<[{VIEW_MODEL_NAME}]>> GetAllAsync()    
        {    
                   try
                   {
                        var results = await _[{DAL_CLASS}].GetAllAsync();
                        var datas = await Task.FromResult(TheMapper.Map<List<[{VIEW_MODEL_NAME}]>>(results));
                        return datas;
                   }
                   catch(Exception ex)
                   {
                        throw;
                   }
        }    

        public int Add([{VIEW_MODEL_NAME}] data)    
        {    
            try
           {
                return _[{DAL_CLASS}].Insert(TheMapper.Map<[{MODEL_NAME}]>(data));
           }
           catch(Exception ex)
           {
                throw;
           }
        }   
        
         public async Task<int> AddAsync([{VIEW_MODEL_NAME}] data)    
         {    
                    try
                   {
                        return await _[{DAL_CLASS}].InsertAsync(TheMapper.Map<[{MODEL_NAME}]>(data));
                   }
                   catch(Exception ex)
                   {
                        throw;
                   }
         }   
        
        public int Update([{VIEW_MODEL_NAME}] data)    
        {    
            try
           {
                return _[{DAL_CLASS}].Update(TheMapper.Map<[{MODEL_NAME}]>(data));
           }
           catch(Exception ex)
           {
                throw;
           }
        }  
        
         public async Task<int> UpdateAsync([{VIEW_MODEL_NAME}] data)    
         {    
                    try
                   {
                        return await _[{DAL_CLASS}].UpdateAsync(TheMapper.Map<[{MODEL_NAME}]>(data));
                   }
                   catch(Exception ex)
                   {
                        throw;
                   }
         }  
        
        public int Delete(long Id)    
        {    
            try
           {
                return _[{DAL_CLASS}].Delete(Id);
           }
           catch(Exception ex)
           {
                throw;
           }
        }    
        
         public async Task<int> DeleteAsync(long Id)    
         {    
                    try
                   {
                        return await _[{DAL_CLASS}].DeleteAsync(Id);
                   }
                   catch(Exception ex)
                   {
                        throw;
                   }
         }    

        public [{VIEW_MODEL_NAME}] GetById(long Id)    
        {    
             try
           {
                var result = _[{DAL_CLASS}].GetById(Id);
                return TheMapper.Map<[{VIEW_MODEL_NAME}]>(result);
           }
           catch(Exception ex)
           {
                throw;
           }
        }    
        
         public async Task<[{VIEW_MODEL_NAME}]> GetByIdAsync(long Id)    
                {    
                     try
                   {
                        var result = await _[{DAL_CLASS}].GetByIdAsync(Id);
                        return await Task.FromResult(TheMapper.Map<[{VIEW_MODEL_NAME}]>(result));
                   }
                   catch(Exception ex)
                   {
                        throw;
                   }
                }    
	}
}